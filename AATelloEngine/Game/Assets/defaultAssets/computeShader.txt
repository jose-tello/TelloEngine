__COMPUTE_SHADER__
#version 460

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;
layout(binding = 1) uniform sampler1D vertexTexture;
layout(binding = 2) uniform sampler1D indexTexture;

uniform int triangleCount;

uniform mat4 projection;
uniform mat4 view;

vec4 triangleColor = vec4(0.2, 0.9, 0.3, 1.0);

bool RayTriangleIntersection(vec3 rayDirection, vec3 rayOrigin)
{

  for (int i = 0; i < triangleCount; i++)
  {
    vec3 vertexPos = texelFetch(indexTexture, i, 0).xyz;
    int vertex1 = int(vertexPos.x);
    int vertex2 = int(vertexPos.y);
    int vertex3 = int(vertexPos.z);
    
    vec3 v0 = (texelFetch(vertexTexture, vertex1, 0)).xyz;
    vec3 v1 = (texelFetch(vertexTexture, vertex2, 0)).xyz;
    vec3 v2 = (texelFetch(vertexTexture, vertex3, 0)).xyz;
  
    vec3 v0v1 = v1 - v0;
    vec3 v1v2 = v2 - v1;
    vec3 v2v0 = v0 - v2;
  
    vec3 triangleNormal = cross(v0v1, v2 - v0);
  
    float dtNDirection = dot(triangleNormal, rayDirection);
    if (dtNDirection <= 0)  //Check ray paralel to the triangle
      continue;

    float D = dot(triangleNormal, v0);
  
    float distToRay = -(dot(triangleNormal, rayOrigin) + D) / dtNDirection;

    if (distToRay <= 0.0)  //Check triangle behind camera
      continue;

    vec3 P = rayOrigin + distToRay * rayDirection;
  
    if (dot(triangleNormal, cross(v0v1, P - v0)) <= 0.0)
       continue;
         
    if (dot(triangleNormal, cross(v1v2, P - v1)) <= 0.0)
       continue;
         
    if (dot(triangleNormal, cross(v2v0, P - v2)) <= 0.0)
       continue;
          
    return true;
    }
  
  return false;
     
}

void main()
{
  vec4 pixelColor = vec4(0.8, 0.2, 0.4, 1.0);
  
  vec2 pixelCoords = vec2(gl_GlobalInvocationID.xy);
  vec2 texSize = imageSize(imgOutput); // fetch image dimensions
  
  //collision tests
  float xPos = 2.0 * (float(pixelCoords.x + 0.5)) / float((texSize.x)) - 1.0;
  float yPos = 2.0 * (float(pixelCoords.y + 0.5)) / float((texSize.y)) - 1.0;
  
  vec3 rayOrigin = (inverse(view) * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  
  vec3 rayDirection = (inverse(projection) * vec4(xPos, yPos, 0.0, 1.0)).xyz;
  rayDirection = (inverse(view) * vec4(rayDirection, 0.0)).xyz;
  rayDirection = normalize(rayDirection);
  
  if (RayTriangleIntersection(rayDirection, rayOrigin))
     imageStore(imgOutput, ivec2(pixelCoords.xy), triangleColor);
  
  else
     imageStore(imgOutput, ivec2(pixelCoords.xy), pixelColor);
}
