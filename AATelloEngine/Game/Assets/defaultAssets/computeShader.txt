__COMPUTE_SHADER__
#version 460

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;
layout(binding = 1) uniform sampler1D vertexTexture;
layout(binding = 2) uniform sampler1D indexTexture;
//uniform sampler1D vertexTexture;

uniform mat4 projection;
uniform mat4 view;

vec4 triangleColor = vec4(0.2, 0.9, 0.3, 1.0);

/*vec3 v0 = vec3(0.0, 0.0, 0.0);
vec3 v1 = vec3(10.0, 0.0, 0.0);
vec3 v2 = vec3(5.0, 10.0, 0.0);*/

bool RayTriangleIntersection(vec3 rayDirection, vec3 rayOrigin)
{
  vec3 v0 = (texture(vertexTexture, 0)).xyz;
  vec3 v1 = (texture(vertexTexture, 0.5)).xyz;
  vec3 v2 = (texture(vertexTexture, 0.9)).xyz;
  
  vec3 v0v1 = v1 - v0;
  vec3 v1v2 = v2 - v1;
  vec3 v2v0 = v0 - v2;
  
  vec3 triangleNormal = cross(v0v1, v2 - v0);
  
  float dtNDirection = dot(triangleNormal, rayDirection);
  if (dtNDirection <= 0)  //Check ray paralel to the triangle
    return false;

  float D = dot(triangleNormal, v0);
  
  float distToRay = -(dot(triangleNormal, rayOrigin) + D) / dtNDirection;

  if (distToRay <= 0.0)  //Check triangle behind camera
    return false;

  vec3 P = rayOrigin + distToRay * rayDirection;
  
  if (dot(triangleNormal, cross(v0v1, P - v0)) <= 0.0)
     return false;
         
  if (dot(triangleNormal, cross(v1v2, P - v1)) <= 0.0)
     return false;
         
  if (dot(triangleNormal, cross(v2v0, P - v2)) <= 0.0)
     return false;
          
  return true;
     
}

void main()
{
  vec4 pixelColor = vec4(0.8, 0.2, 0.4, 1.0);
  
  vec2 pixelCoords = vec2(gl_GlobalInvocationID.xy);
  vec2 texSize = imageSize(imgOutput); // fetch image dimensions
  
  //collision tests
  float xPos = 2.0 * (float(pixelCoords.x + 0.5)) / float((texSize.x)) - 1.0;
  float yPos = 2.0 * (float(pixelCoords.y + 0.5)) / float((texSize.y)) - 1.0;
  
  vec3 rayOrigin = (inverse(view) * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  
  vec3 rayDirection = (inverse(projection) * vec4(xPos, yPos, 0.0, 1.0)).xyz;
  rayDirection = (inverse(view) * vec4(rayDirection, 0.0)).xyz;
  rayDirection = normalize(rayDirection);
  
  if (RayTriangleIntersection(rayDirection, rayOrigin))
     imageStore(imgOutput, ivec2(pixelCoords.xy), triangleColor);
  
  else
     imageStore(imgOutput, ivec2(pixelCoords.xy), texture(indexTexture, 0.4));
}
