__VERTEX_SHADER__ 
#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texCoord;
layout (location = 2) in vec3 normals;

out vec3 fPosition;
out vec2 TexCoord;
out vec3 fNormals;
out vec3 diffuse_color;

uniform vec3 material_color;
uniform mat4 model_matrix;
uniform mat4 view;
uniform mat4 projection;

void main()
{
 gl_Position = projection * view * model_matrix * vec4(position, 1.0f);
 
 fPosition = (model_matrix * vec4(position, 1.0f)).xyz;
 fNormals = normalize(mat3(transpose(inverse(model_matrix))) * normals);
 //fNormals = normals;
 TexCoord = texCoord;
 
 diffuse_color = material_color;
}


__FRAGMENT_SHADER__
#version 330 core
in vec3 fPosition;
in vec2 TexCoord;
in vec3 fNormals;
in vec3 diffuse_color;

out vec4 color;

uniform sampler2D ourTexture;
uniform bool has_texture;

uniform vec3 light_position;
uniform vec3 light_color;
uniform vec3 ambient_color;
uniform float light_intensity;

void main()
{
 vec4 material_color;

 if (has_texture == true)
  material_color = normalize(texture(ourTexture, TexCoord) * vec4(diffuse_color, 1.0));

 else
  material_color = vec4(diffuse_color, 1.0);
  
  
  vec3 light_direction = normalize(light_position - fPosition);  
  
  //diffuse light
  float light_falloff = max(0, dot(light_direction, fNormals));
  vec3 diffuse_light = light_color * light_falloff;
  
  color = vec4(ambient_color + diffuse_light * light_intensity, 1.0f) + material_color;
  //color = vec4 (light_direction, 1.);
}