__COMPUTE_SHADER__
#version 460

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;
layout(binding = 1) uniform sampler1D vertexTexture;
layout(binding = 2) uniform sampler1D indexTexture;
layout(binding = 3) uniform sampler1D uvTexture;

uniform int meshCount;
uniform int aberrationCount;

uniform int cameraInsideAberration;

float maxDirX = 0.0;
float minDirX = 0.0;

float maxDirY = 0.0;
float minDirY = 0.0;

float maxDirZ = 0.0;
float minDirZ = 0.0;

vec3 originalRayDir;

uniform mat4 view;

uniform float aspectRatio;
uniform float verticalFov;

struct Mesh
{
   mat4 transform;
   vec3 maxPoint;
   vec3 minPoint;
   int indexOffset;
   int vertexOffset;
   int indexCount;
   
   sampler2D diffuseTexture;
   
   vec3 color;
};

struct Aberration
{
   mat4 transform;
   vec3 maxPoint;
   vec3 minPoint;
   int indexOffset;
   int vertexOffset;
   int indexCount;
   
   float xDeformation;
   float yDeformation;
   float zDeformation;

};

uniform Mesh[20] meshArray;
uniform Aberration[5] aberrationArray;

vec4 pixelColor = vec4(0.5, 0.5, 0.5, 1.0);

bool RayBoxIntersection(vec3 rayDirection, vec3 rayOrigin, vec3 minP, vec3 maxP)
{
   float dstMinToRay = dot(rayDirection, rayOrigin - minP);
   float dstMaxToRay = dot(rayDirection, rayOrigin - maxP);
      
   float auxMin = (minP.x - rayOrigin.x) / rayDirection.x;
   float auxMax = (maxP.x - rayOrigin.x) / rayDirection.x;

   float tMin = min(auxMin, auxMax);
   float tMax = max(auxMin, auxMax);
   
   auxMin = (minP.y - rayOrigin.y) / rayDirection.y;
   auxMax = (maxP.y - rayOrigin.y) / rayDirection.y;
   
   float yMin = min(auxMin, auxMax);
   float yMax = max(auxMin, auxMax);
   
   if ((tMin > yMax) || (yMin > tMax))
      return false;
      
   tMin = max(tMin, yMin);
   yMax = min(tMax, yMax);      
      
   auxMin = (minP.z - rayOrigin.z) / rayDirection.z;
   auxMax = (maxP.z - rayOrigin.z) / rayDirection.z;
      
   float zMin = min(auxMin, auxMax);
   float zMax = max(auxMin, auxMax);
   
   if ((tMin > zMax) || (zMin > tMax))
      return false;

   return true;
}

vec4 RayTriangleIntersection(vec3 rayDirection, vec3 rayOrigin, out float dst)
{
  dst = 999999.0;
  vec4 ret = pixelColor;
  
  for(int i = 0; i < meshCount; ++i)
  {
     if (RayBoxIntersection(rayDirection, rayOrigin, meshArray[i].minPoint, meshArray[i].maxPoint) == false)
        continue;
  
     for (int j = 0; j < meshArray[i].indexCount / 3; ++j)  //index count / 3 = triangle count
      {
      
       vec3 vertexPos = texelFetch(indexTexture, j + meshArray[i].indexOffset, 0).xyz;
       int vertex1 = int(vertexPos.x) + meshArray[i].vertexOffset;
       int vertex2 = int(vertexPos.y) + meshArray[i].vertexOffset;
       int vertex3 = int(vertexPos.z) + meshArray[i].vertexOffset;
    
       vec3 v0 = (texelFetch(vertexTexture, vertex1, 0)).xyz;
       vec3 v1 = (texelFetch(vertexTexture, vertex2, 0)).xyz;
       vec3 v2 = (texelFetch(vertexTexture, vertex3, 0)).xyz;
       
       v0 = (meshArray[i].transform * vec4(v0, 1.0)).xyz;
       v1 = (meshArray[i].transform * vec4(v1, 1.0)).xyz;
       v2 = (meshArray[i].transform * vec4(v2, 1.0)).xyz;
  
       //calculate baricentric coords
       vec3 v0v1 = v1 - v0;
       vec3 v0v2 = v2 - v0;
       vec3 pVec = cross(rayDirection, v0v2);
       
       float det = dot(v0v1, pVec);    
       
       if (det <= 0.0)
          continue;
          
       float invDet = 1.0 / det;
       
       vec3 tVec = rayOrigin - v0;
       float u = dot(tVec, pVec) * invDet;
       
       if (u < 0.0 || u > 1.0)
          continue;
          
       vec3 qVec = cross(tVec, v0v1);
       float v = dot(rayDirection, qVec) * invDet;
       
       if ((v < 0.0) || (u + v > 1.0))
          continue;
  
       float distanceToOrigin = dot(v0v2, qVec) * invDet; 
       
       if (distanceToOrigin <= 0.0)
          continue;
       
       vec2 uv1 = (texelFetch(uvTexture, vertex1, 0)).xy;
       vec2 uv2 = (texelFetch(uvTexture, vertex2, 0)).xy;
       vec2 uv3 = (texelFetch(uvTexture, vertex3, 0)).xy;
       
       vec2 uv = u * uv2 + v * uv3 + (1.0 - u - v) * uv1;
       
       vec4 col = mix(texture(meshArray[i].diffuseTexture, uv), vec4(meshArray[i].color, 1.0), 0.6);
       
       ret = col * step(distanceToOrigin, dst) + ret * step(dst, distanceToOrigin);
       dst = min(dst, distanceToOrigin);
       }
    }
  return ret;
}


int RayAberrationIntersection(vec3 rayDirection, vec3 rayOrigin, out float dst, out int aberrationSign)
{
  int aberrationIterator = 0;
  dst = 999999.9;
  
  for(int i = 0; i < aberrationCount; ++i)
  {
     if (RayBoxIntersection(rayDirection, rayOrigin, aberrationArray[i].minPoint, aberrationArray[i].maxPoint) == false)
        continue;
  
     for (int j = 0; j < aberrationArray[i].indexCount / 3; ++j)  //index count / 3 = triangle count
      {
      
       vec3 vertexPos = texelFetch(indexTexture, j + aberrationArray[i].indexOffset, 0).xyz;
       int vertex1 = int(vertexPos.x) + aberrationArray[i].vertexOffset;
       int vertex2 = int(vertexPos.y) + aberrationArray[i].vertexOffset;
       int vertex3 = int(vertexPos.z) + aberrationArray[i].vertexOffset;
    
       vec3 v0 = (texelFetch(vertexTexture, vertex1, 0)).xyz;
       vec3 v1 = (texelFetch(vertexTexture, vertex2, 0)).xyz;
       vec3 v2 = (texelFetch(vertexTexture, vertex3, 0)).xyz;
       
       v0 = (aberrationArray[i].transform * vec4(v0, 1.0)).xyz;
       v1 = (aberrationArray[i].transform * vec4(v1, 1.0)).xyz;
       v2 = (aberrationArray[i].transform * vec4(v2, 1.0)).xyz;
  
       //calculate baricentric coords
       vec3 v0v1 = v1 - v0;
       vec3 v0v2 = v2 - v0;
       vec3 pVec = cross(rayDirection, v0v2);
       
       float det = dot(v0v1, pVec);
       
       if (abs(det) <= 0.0)        //Use absolute value to check if it hits front or back
          continue;
          
       float invDet = 1.0 / (det);
       
       vec3 tVec = rayOrigin - v0;
       float u = dot(tVec, pVec) * invDet;
       
       if (u < 0.0 || u > 1.0)
          continue;
          
       vec3 qVec = cross(tVec, v0v1);
       float v = dot(rayDirection, qVec) * invDet;
       
       if (v < 0.0 || u + v > 1.0)
          continue;
  
       float distanceToOrigin = dot(v0v2, qVec) * invDet; 
       
       if (distanceToOrigin <= 0.0)
          continue;
       
       if (distanceToOrigin < dst)
       {
          aberrationIterator = i;
          aberrationSign = int(sign(det));
          dst = distanceToOrigin;
       }
       
       /*aberrationIterator = int(step(0.0, distanceToOrigin) * step(distanceToOrigin, dst) * i 
                            + step(dst, distanceToOrigin) * aberrationIterator);
                            
       aberrationSign = int(step(0.0, distanceToOrigin) * step(distanceToOrigin, dst) * sign(det) 
                            + step(dst, distanceToOrigin) * aberrationSign);
                            
       dst = step(0.0, distanceToOrigin) * step(distanceToOrigin, dst) * distanceToOrigin
                            + step(dst, distanceToOrigin) * dst;*/

       }
    }
    
    return aberrationIterator;
}


vec4 CalculateColor(vec3 rayDirection, vec3 rayOrigin)
{

  float meshDst = 0.0;
  float aberrationDst = 0.0;
  int aberrationSign = 0;
  
  vec4 meshColor = RayTriangleIntersection(rayDirection, rayOrigin, meshDst);
  int abIt = RayAberrationIntersection(rayDirection, rayOrigin, aberrationDst, aberrationSign);  //Aberration iterator
  
  if (meshDst < aberrationDst)
    return meshColor;
    

  rayOrigin = rayOrigin + aberrationDst * rayDirection;
       
  rayDirection =  step(aberrationSign, 0) * originalRayDir + step(0, aberrationSign) * vec3(
  rayDirection.x + aberrationArray[abIt].xDeformation * (2.0 * smoothstep(minDirX, maxDirX, rayDirection.x) - 1.0),
  rayDirection.y + aberrationArray[abIt].yDeformation * (2.0 * smoothstep(minDirY, maxDirY, rayDirection.y) - 1.0),
  rayDirection.z + aberrationArray[abIt].zDeformation * (2.0 * smoothstep(minDirZ, maxDirZ, rayDirection.z) - 1.0)
  );

  rayDirection = normalize(rayDirection);      
     
  
  
  float dst;
  return RayTriangleIntersection(rayDirection, rayOrigin, dst);
}


void CalculateMinMaxPoints()
{  
  mat4 cameraToWorld = inverse(view);
  
  vec3 rayOrigin = (cameraToWorld * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  
  float xPos = -1.0;
  float yPos = -1.0;
  
  xPos = xPos * aspectRatio * tan(verticalFov * 0.5);
  yPos = yPos * tan(verticalFov * 0.5);
    
  vec3 p = (cameraToWorld * vec4(xPos, yPos, -1.0, 1.0)).xyz;
  
  vec3 rayD1 = normalize(p - rayOrigin);
  
  xPos = 1;
  yPos = 1;
  
  xPos = xPos * aspectRatio * tan(verticalFov * 0.5);
  yPos = yPos * tan(verticalFov * 0.5);
  
  p = (cameraToWorld * vec4(xPos, yPos, -1, 1)).xyz;
  
  vec3 rayD2 = normalize(p - rayOrigin);
  
  minDirX = min(rayD1.x, rayD2.x);
  minDirY = min(rayD1.y, rayD2.y);
  minDirZ = min(rayD1.z, rayD2.z);
  
  maxDirX = max(rayD1.x, rayD2.x);
  maxDirY = max(rayD1.y, rayD2.y);
  maxDirZ = max(rayD1.z, rayD2.z);
}

void main()
{  
  vec2 pixelCoords = vec2(gl_GlobalInvocationID.xy);
  vec2 texSize = imageSize(imgOutput); // fetch image dimensions
  
  //collision tests
  float pixCoordX = float(pixelCoords.x);
  float pixCoordY = float(pixelCoords.y);
  float xPos = 2 * ((pixCoordX + 0.5) / float(texSize.x)) - 1;
  float yPos = 2 * ((pixCoordY + 0.5) / float(texSize.y)) - 1;
  
  xPos = xPos * aspectRatio * tan(verticalFov * 0.5);
  yPos = yPos * tan(verticalFov * 0.5);
  
  mat4 cameraToWorld = inverse(view);
  
  vec3 rayOrigin = (cameraToWorld * vec4(0, 0, 0, 1)).xyz;
  vec3 p = (cameraToWorld * vec4(xPos, yPos, -1, 1)).xyz;
  
  vec3 rayDirection = normalize(p - rayOrigin);
  originalRayDir = rayDirection;
  
  CalculateMinMaxPoints();
  
  if (cameraInsideAberration != -1)
  {
     rayDirection.x += aberrationArray[cameraInsideAberration].xDeformation * (2.0 * smoothstep(minDirX, maxDirX, rayDirection.x) - 1.0);
     rayDirection.y += aberrationArray[cameraInsideAberration].yDeformation * (2.0 * smoothstep(minDirY, maxDirY, rayDirection.y) - 1.0);
     rayDirection.z += aberrationArray[cameraInsideAberration].zDeformation * (2.0 * smoothstep(minDirZ, maxDirZ, rayDirection.z) - 1.0);
       
     rayDirection = normalize(rayDirection); 
  
  }
  
  vec4 color = CalculateColor(rayDirection, rayOrigin);

  imageStore(imgOutput, ivec2(pixelCoords.xy), vec4(color.rgb, 255.0));
}