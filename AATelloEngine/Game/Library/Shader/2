__COMPUTE_SHADER__
#version 430

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

uniform mat4 projection;
uniform mat4 view;

vec4 triangleColor = vec4(0.2, 0.9, 0.3, 1.0);

void main()
{
  vec4 pixelColor = vec4(0.8, 0.2, 0.4, 1.0);
  
  vec2 pixelCoords = vec2(gl_GlobalInvocationID.xy);
  vec2 texSize = imageSize(imgOutput); // fetch image dimensions
  
  //collision tests
  float xPos = 2.0 * (float(pixelCoords.x + 0.5)) / float((texSize.x)) - 1.0;
  float yPos = 2.0 * (float(pixelCoords.y + 0.5)) / float((texSize.y)) - 1.0;
  
  vec3 rayOrigin = (inverse(view) * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  
  vec3 direction = (inverse(projection) * vec4(xPos, yPos, 0.0, 1.0)).xyz;
  direction = (inverse(view) * vec4(direction, 0.0)).xyz;
  direction = normalize(direction);
  
  vec3 v0 = ( vec4(0.0, 0.0, 0.0, 0.0)).xyz;
  vec3 v1 = ( vec4(10.0, 0.0, 0.0, 0.0)).xyz;
  vec3 v2 = ( vec4(5.0, 10.0, 0.0, 0.0)).xyz;
  
  vec3 edge0 = v1 - v0;
  vec3 edge1 = v2 - v1;
  vec3 edge2 = v0 - v2;
  
  vec3 triangleNormal = cross(edge0, v2 - v0);
  
  if (dot(triangleNormal, direction) > 0)  //Check ray paralel to the triangle
  {
    float D = dot(triangleNormal, v0);
  
    float distToRay = -(dot(triangleNormal, rayOrigin) + D) / dot(triangleNormal, direction);
    if (distToRay > 0.0)  //Check triangle behind camera
    {
    vec3 P = rayOrigin + distToRay * direction;
      if (dot(triangleNormal, cross(edge0, P - v0)) > 0.0 &&
          dot(triangleNormal, cross(edge1, P - v1)) > 0.0 &&
          dot(triangleNormal, cross(edge2, P - v2)) > 0.0)
          pixelColor = triangleColor;
    }
  }
  
  imageStore(imgOutput, ivec2(pixelCoords.xy), pixelColor);
  }