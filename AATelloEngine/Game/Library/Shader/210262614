__VERTEX_SHADER__ 
#version 330 core
layout (location = 0) in vec3 position;

out vec3 waterPos;

uniform mat4 model_matrix;
uniform mat4 view;
uniform mat4 projection;
uniform float timer;

float wave_lenght = 6;
float wave_amplitude = 0.6;
float PI = 3.14;


float GenerateWaterOffset(float x, float z, float time_mod)
{
 float x_radians = ((x / wave_lenght) + time_mod / 2.5) * PI;
 float z_radians = ((z / wave_lenght) + time_mod / 2.5) * PI;
 
 return (wave_amplitude * 0.5 * (sin(z_radians) + cos(x_radians)));
}


vec3 ApplyWaterDistortion()
{
 float x_offset = GenerateWaterOffset(position.x, position.z, timer);
 float y_offset = GenerateWaterOffset(position.x, position.z, 0);
 float z_offset = GenerateWaterOffset(position.x, position.z, timer);
 
 return position + vec3(x_offset, y_offset, z_offset);
}


void main()
{
 waterPos = ApplyWaterDistortion();
 gl_Position = projection * view * model_matrix * vec4(waterPos, 1.0f);
}


__FRAGMENT_SHADER__
#version 330 core
in vec3 waterPos;
out vec4 color;

void main()
{

 color = vec4(waterPos.z, waterPos.z, 1.0, 1.0);
}